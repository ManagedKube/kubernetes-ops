# source: https://grafana.com/dashboards/6873
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    grafana_dashboard: "1"
  name: analysis-by-cluster-dashboard
data:
  analysis-by-cluster-dashboard.json: |-
    {
      "__inputs": [
        {
          "name": "DS_PROMETHEUS",
          "label": "Prometheus",
          "description": "",
          "type": "datasource",
          "pluginId": "prometheus",
          "pluginName": "Prometheus"
        },
        {
          "name": "VAR_COSTCPU",
          "type": "constant",
          "label": "CPU",
          "value": "17.78",
          "description": ""
        },
        {
          "name": "VAR_COSTPCPU",
          "type": "constant",
          "label": "PE CPU",
          "value": "5.35",
          "description": ""
        },
        {
          "name": "VAR_COSTRAM",
          "type": "constant",
          "label": "RAM",
          "value": "2.38",
          "description": ""
        },
        {
          "name": "VAR_COSTPRAM",
          "type": "constant",
          "label": "PE RAM",
          "value": "0.72",
          "description": ""
        },
        {
          "name": "VAR_COSTSTORAGESTANDARD",
          "type": "constant",
          "label": "Storage",
          "value": "0.044",
          "description": ""
        },
        {
          "name": "VAR_COSTSTORAGESSD",
          "type": "constant",
          "label": "SSD",
          "value": "0.187",
          "description": ""
        },
        {
          "name": "VAR_COSTDISCOUNT",
          "type": "constant",
          "label": "Disc.",
          "value": "30",
          "description": ""
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "5.2.1"
        },
        {
          "type": "datasource",
          "id": "prometheus",
          "name": "Prometheus",
          "version": "5.0.0"
        },
        {
          "type": "panel",
          "id": "singlestat",
          "name": "Singlestat",
          "version": "5.0.0"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": "5.0.0"
        },
        {
          "type": "panel",
          "id": "text",
          "name": "Text",
          "version": "5.0.0"
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "A dashboard to help with cost and utilisation",
      "editable": true,
      "gnetId": 6873,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1530978789642,
      "links": [],
      "panels": [
        {
          "content": "This dashboard shows indicative monthly costing for the cluster, based on **current** requests for CPU, RAM and Storage.  \nUtilisation figures represent utilsation of current, active deployments vs their request limits, and **does not** include data from instances no longer running.",
          "gridPos": {
            "h": 2,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 86,
          "links": [],
          "mode": "markdown",
          "title": "",
          "transparent": true,
          "type": "text"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": true,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(50, 172, 45, 0.97)",
            "#c15c17"
          ],
          "datasource": "Prometheus",
          "decimals": 2,
          "description": "This gauge shows the current CPU use vs CPU available",
          "editable": true,
          "error": false,
          "format": "percent",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": true,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 3,
            "x": 0,
            "y": 2
          },
          "height": "180px",
          "hideTimeOverride": true,
          "id": 82,
          "interval": null,
          "isNew": true,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "(\n  sum(\n    count(irate(container_cpu_usage_seconds_total{id=\"/\"}[1m])) by (instance)\n    * on (instance) \n    sum(irate(container_cpu_usage_seconds_total{id=\"/\"}[1m])) by (instance)\n  ) \n  / \n  (sum (kube_node_status_allocatable_cpu_cores))\n) * 100",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "refId": "A",
              "step": 10
            }
          ],
          "thresholds": "30, 80",
          "timeFrom": "",
          "title": "CPU Utilisation",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": true,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(50, 172, 45, 0.97)",
            "#c15c17"
          ],
          "datasource": "Prometheus",
          "decimals": 2,
          "description": "This panel shows current CPU reservation requests by applications, vs CPU available",
          "editable": true,
          "error": false,
          "format": "percent",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": true,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 3,
            "x": 3,
            "y": 2
          },
          "height": "180px",
          "id": 91,
          "interval": null,
          "isNew": true,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "(\n  sum(container_spec_cpu_shares{namespace!=\"\"})\n  / \n  (sum (kube_node_status_allocatable_cpu_cores) * 1000)\n) * 100",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "refId": "A",
              "step": 10
            }
          ],
          "thresholds": "30, 80",
          "title": "CPU Requests",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "decimals": 2,
          "format": "currencyUSD",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 4,
            "x": 6,
            "y": 2
          },
          "id": 75,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "label_cloud_google_com_gke_preemptible",
          "targets": [
            {
              "expr": "sum(\n  (\n    (\n      sum(kube_node_status_capacity_cpu_cores) by (node)\n       * on (node) group_left (label_cloud_google_com_gke_preemptible)\n      kube_node_labels{label_cloud_google_com_gke_preemptible=\"true\"}\n    ) * $costpcpu\n  )\n  or\n  (\n    (\n      sum(kube_node_status_capacity_cpu_cores) by (node)\n       * on (node) group_left (label_cloud_google_com_gke_preemptible)\n      kube_node_labels{label_cloud_google_com_gke_preemptible!=\"true\"}\n    ) * ($costcpu - ($costcpu / 100 * $costDiscount))\n  )\n) ",
              "format": "time_series",
              "instant": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": " {{ node }}",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeShift": null,
          "title": "CPU Cost",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "decimals": 2,
          "format": "currencyUSD",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 4,
            "x": 10,
            "y": 2
          },
          "id": 78,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "label_cloud_google_com_gke_preemptible",
          "targets": [
            {
              "expr": "sum (\n  sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) / 1024 / 1024 /1024 * $costStorageSSD\n\n+\n\nsum (\n  sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) / 1024 / 1024 /1024 * $costStorageStandard\n\n+ \n\nsum(container_fs_limit_bytes{device=~\"^/dev/[sv]d[a-z][1-9]$\",id=\"/\"}) / 1024 / 1024 / 1024 * $costStorageStandard",
              "format": "time_series",
              "instant": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": " {{ node }}",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeShift": null,
          "title": "Storage Cost (Cluster and PVC)",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "columns": [
            {
              "text": "Avg",
              "value": "avg"
            }
          ],
          "datasource": "Prometheus",
          "description": "This table shows the comparison of CPU and RAM requests by applications, vs the capacity of the node",
          "fontSize": "100%",
          "gridPos": {
            "h": 8,
            "w": 10,
            "x": 14,
            "y": 2
          },
          "hideTimeOverride": true,
          "id": 90,
          "links": [],
          "pageSize": 7,
          "repeatDirection": "v",
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 1,
            "desc": true
          },
          "styles": [
            {
              "alias": "RAM Requests",
              "colorMode": "value",
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(50, 172, 45, 0.97)",
                "#ef843c"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value #A",
              "thresholds": [
                "30",
                " 80"
              ],
              "type": "number",
              "unit": "percent"
            },
            {
              "alias": "Node",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "node",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "CPU Requests",
              "colorMode": "value",
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(50, 172, 45, 0.97)",
                "#ef843c"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value #B",
              "thresholds": [
                "30",
                " 80"
              ],
              "type": "number",
              "unit": "percent"
            }
          ],
          "targets": [
            {
              "expr": "( \n  sum(kube_pod_container_resource_requests_cpu_cores) by (node) \n  /\n  sum(kube_node_status_allocatable_cpu_cores) by (node)\n) * 100",
              "format": "table",
              "instant": true,
              "intervalFactor": 1,
              "legendFormat": "{{ node }}",
              "refId": "B"
            },
            {
              "expr": "( \n  sum(kube_pod_container_resource_requests_memory_bytes) by (node) \n  /\n  sum(kube_node_status_allocatable_memory_bytes) by (node)\n) * 100",
              "format": "table",
              "hide": false,
              "instant": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ node }}",
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Cluster Node Utilisation by CPU and RAM requests",
          "transform": "table",
          "transparent": false,
          "type": "table"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": true,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(50, 172, 45, 0.97)",
            "#c15c17"
          ],
          "datasource": "Prometheus",
          "description": "This gauge shows current RAM use by RAM available",
          "editable": true,
          "error": false,
          "format": "percent",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": true,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 3,
            "x": 0,
            "y": 6
          },
          "height": "180px",
          "hideTimeOverride": true,
          "id": 80,
          "interval": null,
          "isNew": true,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "(\n  sum(\n    count(container_memory_working_set_bytes{id=\"/\"}) by (instance)\n    * on (instance) \n    sum(avg_over_time(container_memory_working_set_bytes{id=\"/\"}[1m])) by (instance)\n  )\n  /\n  sum(kube_node_status_allocatable_memory_bytes)\n) * 100",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "refId": "A",
              "step": 10
            }
          ],
          "thresholds": "30,80",
          "timeFrom": "",
          "title": "RAM Utilisation",
          "transparent": false,
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": true,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(50, 172, 45, 0.97)",
            "#c15c17"
          ],
          "datasource": "Prometheus",
          "description": "This panel shows current RAM reservation requests by applications, vs RAM available",
          "editable": true,
          "error": false,
          "format": "percent",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": true,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 3,
            "x": 3,
            "y": 6
          },
          "height": "180px",
          "id": 92,
          "interval": null,
          "isNew": true,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "(\n  sum(kube_pod_container_resource_requests_memory_bytes{namespace!=\"\"})\n  /\n  sum(kube_node_status_allocatable_memory_bytes)\n) * 100",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "refId": "A",
              "step": 10
            }
          ],
          "thresholds": "30,80",
          "title": "RAM Requests",
          "transparent": false,
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "decimals": 2,
          "format": "currencyUSD",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 4,
            "x": 6,
            "y": 6
          },
          "id": 77,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "label_cloud_google_com_gke_preemptible",
          "targets": [
            {
              "expr": "sum(\n  (\n    (\n      sum(kube_node_status_capacity_memory_bytes) by (node)\n       * on (node) group_left (label_cloud_google_com_gke_preemptible)\n      kube_node_labels{label_cloud_google_com_gke_preemptible=\"true\"}\n    ) /1024/1024/1024 * $costpram\n  )\n  or\n  (\n    (\n      sum(kube_node_status_capacity_memory_bytes) by (node)\n       * on (node) group_left (label_cloud_google_com_gke_preemptible)\n      kube_node_labels{label_cloud_google_com_gke_preemptible!=\"true\"}\n    ) /1024/1024/1024 * ($costram - ($costram / 100 * $costDiscount))\n)\n) ",
              "format": "time_series",
              "instant": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": " {{ node }}",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeShift": null,
          "title": "RAM Cost",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "decimals": 2,
          "format": "currencyUSD",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 4,
            "x": 10,
            "y": 6
          },
          "id": 93,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "label_cloud_google_com_gke_preemptible",
          "targets": [
            {
              "expr": "# CPU\nsum(\n  (\n    (\n      sum(kube_node_status_capacity_cpu_cores) by (node)\n       * on (node) group_left (label_cloud_google_com_gke_preemptible)\n      kube_node_labels{label_cloud_google_com_gke_preemptible=\"true\"}\n    ) * $costpcpu\n  )\n  or\n  (\n    (\n      sum(kube_node_status_capacity_cpu_cores) by (node)\n       * on (node) group_left (label_cloud_google_com_gke_preemptible)\n      kube_node_labels{label_cloud_google_com_gke_preemptible!=\"true\"}\n    ) * ($costcpu - ($costcpu / 100 * $costDiscount))\n  )\n) \n\n+ \n\n# Storage\nsum (\n  sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) / 1024 / 1024 /1024 * $costStorageSSD\n\n+\n\nsum (\n  sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) / 1024 / 1024 /1024 * $costStorageStandard\n\n+ \n\nsum(container_fs_limit_bytes{device=~\"^/dev/[sv]d[a-z][1-9]$\",id=\"/\"}) / 1024 / 1024 / 1024 * $costStorageStandard\n\n+ \n# RAM\nsum(\n  (\n    (\n      sum(kube_node_status_capacity_memory_bytes) by (node)\n       * on (node) group_left (label_cloud_google_com_gke_preemptible)\n      kube_node_labels{label_cloud_google_com_gke_preemptible=\"true\"}\n    ) /1024/1024/1024 * $costpram\n  )\n  or\n  (\n    (\n      sum(kube_node_status_capacity_memory_bytes) by (node)\n       * on (node) group_left (label_cloud_google_com_gke_preemptible)\n      kube_node_labels{label_cloud_google_com_gke_preemptible!=\"true\"}\n    ) /1024/1024/1024 * ($costram - ($costram / 100 * $costDiscount))\n)\n) ",
              "format": "time_series",
              "instant": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": " {{ node }}",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeShift": null,
          "title": "Total Cost",
          "type": "singlestat",
          "valueFontSize": "110%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "columns": [
            {
              "text": "Avg",
              "value": "avg"
            }
          ],
          "datasource": "Prometheus",
          "fontSize": "100%",
          "gridPos": {
            "h": 11,
            "w": 14,
            "x": 0,
            "y": 10
          },
          "hideTimeOverride": false,
          "id": 73,
          "links": [],
          "pageSize": 10,
          "repeat": null,
          "repeatDirection": "v",
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 7,
            "desc": true
          },
          "styles": [
            {
              "alias": "Namespace",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(50, 172, 45, 0.97)",
                "#c15c17"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "link": true,
              "linkTooltip": "View namespace cost analysis",
              "linkUrl": "d/at-cost-analysis-namespace/cost-analysis-by-namespace?&var-namespace=$__cell",
              "pattern": "namespace",
              "thresholds": [
                "30",
                "80"
              ],
              "type": "string",
              "unit": "currencyUSD"
            },
            {
              "alias": "RAM",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "pattern": "Value #B",
              "thresholds": [],
              "type": "number",
              "unit": "currencyUSD"
            },
            {
              "alias": "CPU",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value #A",
              "thresholds": [],
              "type": "number",
              "unit": "currencyUSD"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Storage",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value #C",
              "thresholds": [],
              "type": "number",
              "unit": "currencyUSD"
            },
            {
              "alias": "Total",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value #D",
              "thresholds": [],
              "type": "number",
              "unit": "currencyUSD"
            },
            {
              "alias": "CPU Utilisation",
              "colorMode": "value",
              "colors": [
                "#bf1b00",
                "rgba(50, 172, 45, 0.97)",
                "#ef843c"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value #E",
              "thresholds": [
                "30",
                "80"
              ],
              "type": "number",
              "unit": "percent"
            },
            {
              "alias": "RAM Utilisation",
              "colorMode": "value",
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(50, 172, 45, 0.97)",
                "#ef843c"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value #F",
              "thresholds": [
                "30",
                "80"
              ],
              "type": "number",
              "unit": "percent"
            }
          ],
          "targets": [
            {
              "expr": "(\n  sum(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\",cloud_google_com_gke_preemptible!=\"true\"}/1000*($costcpu - ($costcpu / 100 * $costDiscount))) by(namespace)\n  or\n  count(\n    count(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n  ) by(namespace) -1\n)\n\n+\n\n(\n  sum(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\",cloud_google_com_gke_preemptible=\"true\"}/1000*$costpcpu) by(namespace)\n  or\n  count(\n    count(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n  ) by(namespace) -1\n)",
              "format": "table",
              "hide": false,
              "instant": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ namespace }}",
              "refId": "A"
            },
            {
              "expr": "sum(\n   count(count(container_spec_cpu_shares{namespace!=\"\"}) by (pod_name, namespace)) by (pod_name, namespace)  \n   * on (pod_name, namespace) \n   sum(irate(container_cpu_usage_seconds_total{namespace!=\"\"}[1m])) by (pod_name, namespace)\n) by (namespace) * 1000\n/\nsum(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\"}) by (namespace) * 100\n",
              "format": "table",
              "instant": true,
              "intervalFactor": 1,
              "legendFormat": "{{ namespace }}",
              "refId": "E"
            },
            {
              "expr": "(\n  sum(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\",cloud_google_com_gke_preemptible!=\"true\"}/1024/1024/1024*($costram- ($costram / 100 * $costDiscount))) by(namespace)\n  or\n  count(\n    count(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n  ) by(namespace) -1\n)\n\n+\n\n(\n  sum(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\",cloud_google_com_gke_preemptible=\"true\"}/1024/1024/1024*$costpram) by(namespace)\n  or\n  count(\n    count(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n  ) by(namespace) -1\n)",
              "format": "table",
              "instant": true,
              "intervalFactor": 1,
              "legendFormat": "{{ namespace }}",
              "refId": "B"
            },
            {
              "expr": "sum(\n   count(count(container_memory_working_set_bytes{namespace!=\"\"}) by (pod_name, namespace)) by (pod_name, namespace)  \n   * on (pod_name, namespace) \n   sum(avg_over_time(container_memory_working_set_bytes{namespace!=\"\"}[1m])) by (pod_name, namespace)\n) by (namespace)\n/\nsum(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\"}) by (namespace) * 100\n",
              "format": "table",
              "instant": true,
              "intervalFactor": 1,
              "legendFormat": "{{ namespace }}",
              "refId": "F"
            },
            {
              "expr": "sum (\n  sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace) / 1024 / 1024 /1024 * $costStorageSSD\n\nor\n\nsum (\n  sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace) / 1024 / 1024 /1024 * $costStorageStandard\n\nor\n\ncount(\n  count(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n) by(namespace) -1",
              "format": "table",
              "instant": true,
              "intervalFactor": 1,
              "legendFormat": "{{ namespace }}",
              "refId": "C"
            },
            {
              "expr": "# Add the CPU\n(\n  (\n    sum(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\",cloud_google_com_gke_preemptible!=\"true\"}/1000*($costcpu - ($costcpu / 100 * $costDiscount))) by(namespace)\n    or\n    count(\n      count(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n    ) by(namespace) -1\n  )\n  \n  +\n  \n  (\n    sum(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\",cloud_google_com_gke_preemptible=\"true\"}/1000*$costpcpu) by(namespace)\n    or\n    count(\n      count(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n    ) by(namespace) -1\n  )\n)\n\n+ \n# Add the RAM\n(\n  (\n    sum(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\",cloud_google_com_gke_preemptible!=\"true\"}/1024/1024/1024*($costram - ($costram / 100 * $costDiscount))) by(namespace)\n    or\n    count(\n      count(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n    ) by(namespace) -1\n  )\n  \n  +\n  \n  (\n    sum(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\",cloud_google_com_gke_preemptible=\"true\"}/1024/1024/1024*$costpram) by(namespace)\n    or\n    count(\n      count(container_spec_memory_limit_bytes{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n    ) by(namespace) -1\n  )\n)\n\n+\n# Add the storage\n(\n\n  sum (\n    sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n    + on (persistentvolumeclaim, namespace) group_right(storageclass)\n    sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n  ) by (namespace) / 1024 / 1024 /1024 * $costStorageSSD\n  \n  or\n  \n  sum (\n    sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n    + on (persistentvolumeclaim, namespace) group_right(storageclass)\n    sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n  ) by (namespace) / 1024 / 1024 /1024 * $costStorageStandard\n  \n  or\n  \n  count(\n    count(container_spec_cpu_shares{namespace!=\"\",namespace!=\"kube-system\"}) by(namespace)\n  ) by(namespace) -1\n\n)",
              "format": "table",
              "instant": true,
              "intervalFactor": 1,
              "refId": "D"
            }
          ],
          "timeFrom": "",
          "timeShift": null,
          "title": "Namespace cost and utilisation analysis",
          "transform": "table",
          "transparent": false,
          "type": "table"
        },
        {
          "columns": [
            {
              "text": "Avg",
              "value": "avg"
            }
          ],
          "datasource": "Prometheus",
          "fontSize": "100%",
          "gridPos": {
            "h": 11,
            "w": 10,
            "x": 14,
            "y": 10
          },
          "hideTimeOverride": true,
          "id": 94,
          "links": [],
          "pageSize": 10,
          "repeatDirection": "v",
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 4,
            "desc": true
          },
          "styles": [
            {
              "alias": "Namespace",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "namespace",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "PVC Name",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "persistentvolumeclaim",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "Storage Class",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "storageclass",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "Cost",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "number",
              "unit": "currencyUSD"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "expr": "sum (\n  sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024 * $costStorageSSD\n\nor\n\nsum (\n  sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024 * $costStorageStandard\n",
              "format": "table",
              "hide": false,
              "instant": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ persistentvolumeclaim }}",
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Persistent Volume Claims",
          "transform": "table",
          "transparent": false,
          "type": "table"
        }
      ],
      "refresh": "10s",
      "schemaVersion": 16,
      "style": "dark",
      "tags": [
        "cost",
        "utilisation",
        "metrics"
      ],
      "templating": {
        "list": [
          {
            "current": {
              "value": "${VAR_COSTCPU}",
              "text": "${VAR_COSTCPU}"
            },
            "hide": 0,
            "label": "CPU",
            "name": "costcpu",
            "options": [
              {
                "value": "${VAR_COSTCPU}",
                "text": "${VAR_COSTCPU}"
              }
            ],
            "query": "${VAR_COSTCPU}",
            "type": "constant"
          },
          {
            "current": {
              "value": "${VAR_COSTPCPU}",
              "text": "${VAR_COSTPCPU}"
            },
            "hide": 0,
            "label": "PE CPU",
            "name": "costpcpu",
            "options": [
              {
                "value": "${VAR_COSTPCPU}",
                "text": "${VAR_COSTPCPU}"
              }
            ],
            "query": "${VAR_COSTPCPU}",
            "type": "constant"
          },
          {
            "current": {
              "value": "${VAR_COSTRAM}",
              "text": "${VAR_COSTRAM}"
            },
            "hide": 0,
            "label": "RAM",
            "name": "costram",
            "options": [
              {
                "value": "${VAR_COSTRAM}",
                "text": "${VAR_COSTRAM}"
              }
            ],
            "query": "${VAR_COSTRAM}",
            "type": "constant"
          },
          {
            "current": {
              "value": "${VAR_COSTPRAM}",
              "text": "${VAR_COSTPRAM}"
            },
            "hide": 0,
            "label": "PE RAM",
            "name": "costpram",
            "options": [
              {
                "value": "${VAR_COSTPRAM}",
                "text": "${VAR_COSTPRAM}"
              }
            ],
            "query": "${VAR_COSTPRAM}",
            "type": "constant"
          },
          {
            "current": {
              "value": "${VAR_COSTSTORAGESTANDARD}",
              "text": "${VAR_COSTSTORAGESTANDARD}"
            },
            "hide": 0,
            "label": "Storage",
            "name": "costStorageStandard",
            "options": [
              {
                "value": "${VAR_COSTSTORAGESTANDARD}",
                "text": "${VAR_COSTSTORAGESTANDARD}"
              }
            ],
            "query": "${VAR_COSTSTORAGESTANDARD}",
            "type": "constant"
          },
          {
            "current": {
              "value": "${VAR_COSTSTORAGESSD}",
              "text": "${VAR_COSTSTORAGESSD}"
            },
            "hide": 0,
            "label": "SSD",
            "name": "costStorageSSD",
            "options": [
              {
                "value": "${VAR_COSTSTORAGESSD}",
                "text": "${VAR_COSTSTORAGESSD}"
              }
            ],
            "query": "${VAR_COSTSTORAGESSD}",
            "type": "constant"
          },
          {
            "current": {
              "value": "${VAR_COSTDISCOUNT}",
              "text": "${VAR_COSTDISCOUNT}"
            },
            "hide": 0,
            "label": "Disc.",
            "name": "costDiscount",
            "options": [
              {
                "value": "${VAR_COSTDISCOUNT}",
                "text": "${VAR_COSTDISCOUNT}"
              }
            ],
            "query": "${VAR_COSTDISCOUNT}",
            "type": "constant"
          }
        ]
      },
      "time": {
        "from": "now-15m",
        "to": "now"
      },
      "timepicker": {
        "hidden": false,
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "browser",
      "title": "Analysis by Cluster",
      "uid": "at-cost-analysis",
      "version": 6
    }
