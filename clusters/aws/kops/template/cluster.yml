#
# using kops cli 1.13.0
  #
  {{- $awsRegion := .awsRegion }}
  {{- $networkPortion := .networkPortion }}
  {{- $kopsName := .kopsName }}
  {{- $dnsZone := .dnsZone }}
  {{- $instanceGroups := .instanceGroups }}
  {{- $availabilityZonesAll := .availabilityZonesAll }}

apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{ .kopsName }}.{{ .dnsZone }}
spec:
  hooks:
  # Adding here since the kubeAPIServer.DisableBasicAuth is not working in this kops version yet
  - before:
    - kubelet.service
    manifest: |
      Type=oneshot
      ExecStart=/usr/bin/sed -i 's/\-\-basic-auth-file=\/srv\/kubernetes\/basic_auth.csv//' /etc/kubernetes/manifests/kube-apiserver.manifest
    name: remove_basic_auth
  # Adding here since the kubeAPIServer.DisableBasicAuth is not working in this kops version yet
  - before:
    - kubelet.service
    manifest: |
      Type=oneshot
      ExecStart=/usr/bin/sed -i 's/\-\-token-auth-file=\/srv\/kubernetes\/known_tokens.csv //' /etc/kubernetes/manifests/kube-apiserver.manifest
    name: remove_token_auth
  fileAssets:
    # https://github.com/kubernetes/kops/blob/master/docs/cluster_spec.md#audit-logging
    - name: apiserver-audit-policy
      path: /srv/kubernetes/audit.yaml
      roles: [Master]
      content: |
        # apiVersion: audit.k8s.io/v1 # This is /v1 resource is not valid yet.
        apiVersion: audit.k8s.io/v1beta1
        kind: Policy
        # Don't generate audit events for all requests in RequestReceived stage.
        omitStages:
          - "RequestReceived"
        rules:
          # Log pod changes at RequestResponse level
          - level: RequestResponse
            resources:
            - group: ""
              # Resource "pods" doesn't match requests to any subresource of pods,
              # which is consistent with the RBAC policy.
              resources: ["pods"]
          # Log "pods/log", "pods/status" at Metadata level
          - level: Metadata
            resources:
            - group: ""
              resources: ["pods/log", "pods/status"]

          # Don't log requests to a configmap called "controller-leader"
          - level: None
            resources:
            - group: ""
              resources: ["configmaps"]
              resourceNames: ["controller-leader"]

          # Don't log watch requests by the "system:kube-proxy" on endpoints or services
          - level: None
            users: ["system:kube-proxy"]
            verbs: ["watch"]
            resources:
            - group: "" # core API group
              resources: ["endpoints", "services"]

          # Don't log authenticated requests to certain non-resource URL paths.
          - level: None
            userGroups: ["system:authenticated"]
            nonResourceURLs:
            - "/api*" # Wildcard matching.
            - "/version"

          # Log the request body of configmap changes in kube-system.
          - level: Request
            resources:
            - group: "" # core API group
              resources: ["configmaps"]
            # This rule only applies to resources in the "kube-system" namespace.
            # The empty string "" can be used to select non-namespaced resources.
            namespaces: ["kube-system"]

          # Log configmap and secret changes in all other namespaces at the Metadata level.
          - level: Metadata
            resources:
            - group: "" # core API group
              resources: ["secrets", "configmaps"]

          # Log all other resources in core and extensions at the Request level.
          - level: Request
            resources:
            - group: "" # core API group
            - group: "extensions" # Version of group should NOT be included.

          # A catch-all rule to log all other requests at the Metadata level.
          - level: Metadata
            # Long-running requests like watches that fall under this rule will not
            # generate an audit event in RequestReceived.
            omitStages:
              - "RequestReceived"
  additionalPolicies:
    node: |
      [
        {"Effect":"Allow","Action":["autoscaling:DescribeAutoScalingGroups","autoscaling:DescribeAutoScalingInstances","autoscaling:DescribeLaunchConfigurations","autoscaling:DescribeTags","autoscaling:SetDesiredCapacity","autoscaling:TerminateInstanceInAutoScalingGroup"],"Resource":"*"}
      ]
  sshKeyName: {{ .sshKeyName }}
  networkID: {{ .vpc }}
  kubernetesApiAccess:
  {{- range $key, $value := .kubernetesApiAccess }}
  - "{{ $value }}"
  {{- end }}
  api:
    dns: {}
    loadBalancer:
      type: {{ .api.loadBalancer.type }}
      idleTimeoutSeconds: 1800
  authorization:
    rbac: {}
{{- if .docker.overrides }}
  docker:
    bridgeIP: {{ .docker.bridgeIP }}
    logDriver: json-file
    logOpt:
    - max-size=10m
    - max-file=5
{{- end }}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{ .s3BucketName }}/{{ .kopsName }}.{{ .dnsZone }}
  etcdClusters:
    # https://github.com/kubernetes/kops/blob/master/docs/cluster_spec.md#etcdclusters-v3--tls
    - enableEtcdTLS: true
      cpuRequest: 200m
      memoryRequest: 128Mi
      etcdMembers:
      {{- range $key, $value := .availabilityZonesEtcd }}
      - instanceGroup: master-{{ $awsRegion }}{{ $value.masterZoneName }}
        name: {{ $value.etcdName }}
      {{- end }}
      name: main
      version: {{ .etcd.version }}
    - enableEtcdTLS: true
      cpuRequest: 200m
      memoryRequest: 128Mi
      etcdMembers:
      {{- range $key, $value := .availabilityZonesEtcd }}
      - instanceGroup: master-{{ $awsRegion }}{{ $value.masterZoneName }}
        name: {{ $value.etcdName }}
      {{- end }}
      name: events
      version: {{ .etcd.version }}
  iam:
    # https://github.com/kubernetes/kops/blob/master/docs/iam_roles.md#iam-roles
    allowContainerRegistry: {{ .iam.allowContainerRegistry }}
    legacy: false
  kubeAPIServer:
    # configs: https://github.com/kubernetes/kops/blob/master/pkg/apis/kops/componentconfig.go
    auditLogPath: /var/log/kube-apiserver-audit.log
    auditLogMaxAge: 30
    auditLogMaxBackups: 10
    auditLogMaxSize: 100
    auditPolicyFile: /srv/kubernetes/audit.yaml
    AnonymousAuth: false
    DisableBasicAuth: false
    tlsMinVersion: VersionTLS12
    tlsCipherSuites: ["TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_GCM_SHA384"]
    # https://github.com/kubernetes/kops/blob/master/docs/cluster_spec.md#runtimeconfig
    # runtimeConfig:
    #   batch/v2alpha1: "true"
    #   apps/v1alpha1: "true"
    # Istio perm for kops: https://istio.io/docs/setup/kubernetes/additional-setup/sidecar-injection/#automatic-sidecar-injection
    # https://archive.istio.io/v0.5/docs/setup/kubernetes/sidecar-injection.html#aws-with-kops
    admissionControl:
      - NamespaceLifecycle
      - LimitRanger
      - ServiceAccount
      - PersistentVolumeLabel
      - DefaultStorageClass
      - DefaultTolerationSeconds
      - MutatingAdmissionWebhook
      - ValidatingAdmissionWebhook
      - ResourceQuota
      - NodeRestriction
      - Priority
  kubeControllerManager:
    tlsMinVersion: VersionTLS12
    tlsCipherSuites: ["TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_GCM_SHA384"]
  kubelet:
    # https://github.com/kubernetes/kops/blob/master/docs/security.md#kubelet-api
    anonymousAuth: false
    tlsMinVersion: VersionTLS12
    tlsCipherSuites: ["TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_GCM_SHA384"]
    # kubeReserved:
    #     cpu: "100m"
    #     memory: "100Mi"
    #     storage: "1Gi"
    # kubeReservedCgroup: "/kube-reserved"
    # systemReserved:
    #     cpu: "100m"
    #     memory: "100Mi"
    #     storage: "1Gi"
    # systemReservedCgroup: "/system-reserved"
    # enforceNodeAllocatable: "pods,system-reserved,kube-reserved"
  kubeDNS:
    provider: CoreDNS
  kubernetesVersion: {{ .kubernetesVersion }}
  masterPublicName: api.{{ .kopsName }}.{{ .dnsZone }}
  networkCIDR: {{ .networkCIDR }}
  networking:
    canal: {}
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
  {{- range $key, $value := .sshAccess }}
  - "{{ $value }}"
  {{- end }}
  subnets:
  # utility subnets
  {{- range $key, $value := .availabilityZonesAll }}
  - cidr: {{ $networkPortion }}.1{{ $key }}.0/24
    name: {{ $awsRegion }}{{ $value.name }}-utility
    type: Utility
    zone: {{ $awsRegion }}{{ $value.zone }}
  {{- end }}

  {{- if .enablePublicSubnets -}}
  {{- range $key, $value := .availabilityZonesAll }}
  - cidr: {{ $networkPortion }}.2{{ $key }}.0/24
    name: public-{{ $value.name }}
    type: Public
    zone: {{ $awsRegion }}{{ $value.zone }}
    {{- end }}
    {{- end }}

    # Kube masters subnets
    {{- range $key, $value := .availabilityZonesKubeMaster }}
  - cidr: {{ $networkPortion }}.3{{ $key }}.0/24
    name: kube-master-{{ $value.name }}
    type: Private
    zone: {{ $awsRegion }}{{ $value.zone }}
    {{- end }}

    # infrastructure subnets
    {{- range $key, $value := .availabilityZonesAll }}
  - cidr: {{ $networkPortion }}.4{{ $key }}.0/24
    name: infrastructure-zone-{{ $value.name }}
    type: Private
    zone: {{ $awsRegion }}{{ $value.zone }}
    {{- end }}

    # worker subnets
    {{- range $key, $value := .availabilityZonesAll }}
  - cidr: {{ $networkPortion }}.5{{ $key }}.0/24
    name: worker-zone-{{ $value.name }}
    type: Private
    zone: {{ $awsRegion }}{{ $value.zone }}
    {{- end }}

    # threatstackmaster subnets
    {{- range $key, $value := .availabilityZonesAll }}
  - cidr: {{ $networkPortion }}.6{{ $key }}.0/24
    name: threatstack-master-zone-{{ $value.name }}
    type: Private
    zone: {{ $awsRegion }}{{ $value.zone }}
    {{- end }}

    topology:
      dns:
        type: {{ .topology.dns.type }}
      masters: {{ .topology.masters }}
      nodes: {{ .topology.nodes }}
    #
    # Kubernetes Masters
    #
    {{- range $key, $value := .availabilityZonesKubeMaster }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}.{{ $dnsZone }}
  name: master-{{ $awsRegion }}{{ $value.name }}
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.kubeMaster.cloudLabels }}
      {{ $key }}: "{{ $value }}"
      {{- end }}
  # CoreOS: https://github.com/kubernetes/kops/blob/06b0111251ab87861e57dbf5f8d36f02e84af04d/docs/images.md#coreos
  image: {{ $instanceGroups.kubeMaster.image }}
  machineType: {{ $instanceGroups.kubeMaster.machineType }}
  maxSize: {{ $instanceGroups.kubeMaster.maxSize }}
  minSize: {{ $instanceGroups.kubeMaster.minSize }}
  nodeLabels:
    kops.k8s.io/instancegroup: master-{{ $awsRegion }}{{ $value.name }}
    {{- range $key, $value := $instanceGroups.kubeMaster.nodeLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  role: Master
  subnets:
    - kube-master-{{ $value.name }}
  {{- end }}

  #
  # Bastion workers group
  # https://github.com/kubernetes/kops/blob/master/docs/bastion.md#configure-the-bastion-instance-group
  #
  {{- if .enableBastionGroup1 -}}
  {{- range $key, $value := .availabilityZonesAll }}
  {{- if eq $value.zone (index $availabilityZonesAll 0).zone }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}.{{ $dnsZone }}
  name: bastion-workers-zone-{{ $value.name }}
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.bastionWorkersGroup1.cloudLabels }}
      {{ $key }}: "{{ $value }}"
      {{- end }}
  associatePublicIp: true
  image: {{ $instanceGroups.bastionWorkersGroup1.image }}
  machineType: {{ $instanceGroups.bastionWorkersGroup1.machineType }}
  maxSize: {{ $instanceGroups.bastionWorkersGroup1.maxSize }}
  minSize: {{ $instanceGroups.bastionWorkersGroup1.minSize }}
  role: Bastion
  subnets:
    - public-{{ $value.name }}
  {{- end }}
  {{- end }}
  {{- end }}

  #
  #  threatstack-master group
  #
  {{- if .enableThreatstackMasterGroup1 -}}
  {{- range $key, $value := .availabilityZonesThreatstackMaster }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}.{{ $dnsZone }}
  name: threatstack-master-zone-{{ $value.name }}
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.threatstackMaster.cloudLabels }}
      {{ $key }}: "{{ $value }}"
      {{- end }}
  image: {{ $instanceGroups.threatstackMaster.image }}
  machineType: {{ $instanceGroups.threatstackMaster.machineType }}
  maxSize: {{ $instanceGroups.threatstackMaster.maxSize }}
  minSize: {{ $instanceGroups.threatstackMaster.minSize }}
  nodeLabels:
    kops.k8s.io/instancegroup: threatstack-master-zone-{{ $value.name }}
    {{- range $key, $value := $instanceGroups.threatstackMaster.nodeLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  {{ if $instanceGroups.threatstackMaster.taints.enable }}
  taints:
    {{- range $key, $value := $instanceGroups.threatstackMaster.taints.items }}
    - "{{ $value }}"
    {{- end }}
  {{- end }}
  role: Node
  subnets:
    - threatstack-master-zone-{{ $value.name }}
  {{- end }}
  {{- end }}

#######################################################
# Worker node group - all zones
#######################################################
{{- $availabilityZonesAll := .availabilityZonesAll }}

{{- range $key, $value := .workerInstanceGroupsAllZones }}
#######################################################
# Worker node group - all zones - {{ $key }}
#######################################################
{{- range $azKey, $azValue := $availabilityZonesAll }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}.{{ $dnsZone }}
  name: {{ $key }}-zone-{{ $azValue.name }}
spec:
  cloudLabels:
    {{- range $keyCloudLabels, $valueCloudLabels := $value.cloudLabels }}
      {{ $keyCloudLabels }}: "{{ $valueCloudLabels }}"
      {{- end }}
  image: {{ $value.image }}
  machineType: {{ $value.machineType }}
  maxSize: {{ $value.maxSize }}
  minSize: {{ $value.minSize }}
  nodeLabels:
    {{- range $nodeLabelsKey, $nodeLabelsValue := $value.nodeLabels }}
    {{ $nodeLabelsKey }}: "{{ $nodeLabelsValue }}"
    {{- end }}
  {{- if $value.taints }}
  taints:
    {{- range $taintsKey, $taintsValue := $value.taints }}
    - "{{ $taintsValue }}"
    {{- end }}
  {{- end }}
  role: Node
  subnets:
  - worker-zone-{{ $azValue.name }}
{{- end }}
{{- end }}
